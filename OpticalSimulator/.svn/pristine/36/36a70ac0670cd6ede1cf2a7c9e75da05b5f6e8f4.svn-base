package br.upe.mascara;

import java.util.HashMap;

public class OperatingPoint implements Comparable<OperatingPoint> {
	private float inputPower;
	private int gainSet;
	private HashMap<Double, Float> inputPowerPerChannel;
	private HashMap<Double, Float> noiseFigurePerChannel;
	private HashMap<Double, Float> gainPerChannel;
	
	public float getTotalInputPower() {
		return inputPower;
	}
	public void setTotalInputPower(float inputPower) {
		this.inputPower = inputPower;
	}
	public int getGainSet() {
		return gainSet;
	}
	public void setGainSet(int gainSet) {
		this.gainSet = gainSet;
	}
	public HashMap<Double, Float> getGainPerChannel() {
		return gainPerChannel;
	}
	public void setGainPerChannel(HashMap<Double, Float> gainPerChannel) {
		this.gainPerChannel = gainPerChannel;
	}
	
	@Override
	public String toString() {
		return inputPower + ", " + gainSet + ", ";
	}
	@Override
	public int compareTo(OperatingPoint arg0) {
		if(this.inputPower < arg0.getTotalInputPower())
			return -1;
		if(this.inputPower > arg0.getTotalInputPower())
			return 1;
		return 0;
	}

	public HashMap<Double, Float> getNoiseFigurePerChannel() {
		return noiseFigurePerChannel;
	}

	public void setNoiseFigurePerChannel(HashMap<Double, Float> noiseFigurePerChannel) {
		this.noiseFigurePerChannel = noiseFigurePerChannel;
	}

	public HashMap<Double, Float> getInputPowerPerChannel() {
		return inputPowerPerChannel;
	}

	public void setInputPowerPerChannel(HashMap<Double, Float> inputPowerPerChannel) {
		this.inputPowerPerChannel = inputPowerPerChannel;
	}
}
