package br.upe.simulations;

import br.upe.base.AmplifierType;
import br.upe.base.Heuristic;
import br.upe.base.ObjectiveFunction;
import br.upe.base.OpticalSignal;
import br.upe.heuristics.lossComp.LossComp;
import br.upe.heuristics.maxGain.MaxGain;
import br.upe.heuristics.uiara.AdGC;
import br.upe.initializations.UniformInitialization;
import br.upe.initializations.UniformInitializationAMPVOA;
import br.upe.metrics.BeckerNoiseFigureMetric;
import br.upe.metrics.OSNRMetric;
import br.upe.metrics.SimpleFlatnessMetric;
import br.upe.metrics.SumPowerConsumption;
import br.upe.objfunctions.rn.NNFunction;
import br.upe.selection.QuadraticSelection;
import br.upe.selection.UiaraWeightSelection;
import br.upe.signal.factory.ITUGridUniformSignal;
import br.upe.simulations.simsetups.SimSetAMPVOA;
import br.upe.simulations.simsetups.SimulationSetup;
import br.upe.util.DecibelConverter;

public class SimOpticalSignal {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Heuristic heuristic;
		ObjectiveFunction function = new NNFunction();

		AmplifierType type = AmplifierType.L21_40CH;
		int rateCh = 10; //Gbps
		int numberCh = 10;
		switch(type){
		case L17_10CH:
			numberCh = 10;
			break;
		case L17_20CH:
			numberCh = 20;
			break;
		case L17_40CH:
			numberCh = 40;
			break;
		case L21_40CH:
			numberCh = 40;
			break;
		case L17_80CH:
			numberCh = 80;
			break;
		}

		float[] restricao = {1f, -1f, -2.5f, -4f, -6f};

		for(int i=0; i<restricao.length; i++){
			
			System.out.println("///////////////////////////////////////////////////////////");
			System.out.printf("----	Tx= -3 dBm/ch Lmux = 18 dB Restrição = %2.1f dBm/ch ----\n", restricao[i]);
			System.out.println("///////////////////////////////////////////////////////////");
			
			SimulationSetup simSet = new SimSetAMPVOA(numberCh, -21.0f, restricao[i]);
			float[] linLosses = simSet.getLINK_LOSSES();
			int numberAmplifiers = simSet.getNumberOfAmplifiers();

			//Definindo ganho máximo
			float maxPout = simSet.getMaxOutputPower();
			System.out.println(maxPout);

			float linkInputPower = DecibelConverter.calculateInputPower(simSet.getCHANNELS(), simSet.getCHANNEL_POWER());

			ITUGridUniformSignal signal = new ITUGridUniformSignal(simSet.getCHANNELS(), 1.921e14, 50e9, simSet.getCHANNEL_POWER(), 30);
			OpticalSignal inputSignal = signal.createSignal();


			//LOSSCOMP
			long t1 = System.currentTimeMillis();
			heuristic = new LossComp(numberAmplifiers, linkInputPower, linLosses, function, 1);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setOsnrMetric(new OSNRMetric(inputSignal, linLosses));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");

			//MaxGain
			t1 = System.currentTimeMillis();
			inputSignal = signal.createSignal();
			heuristic = new MaxGain(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setOsnrMetric(new OSNRMetric(inputSignal, linLosses));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");

			//MaxGainAMPVOA
			t1 = System.currentTimeMillis();
			inputSignal = signal.createSignal();
			heuristic = new MaxGain(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitializationAMPVOA(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setOsnrMetric(new OSNRMetric(inputSignal, linLosses));
			heuristic.setVoaMaxAttenuation(20.0f);
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");

			//UIARA
			t1 = System.currentTimeMillis();
			inputSignal = signal.createSignal();
			heuristic = new AdGC(numberAmplifiers, linkInputPower, linLosses, function, 50);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new UiaraWeightSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setOsnrMetric(new OSNRMetric(inputSignal, linLosses));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);


			// When the selection uses weight
			if (heuristic.getSelectionOp() instanceof UiaraWeightSelection) {
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setNFWeight(1);
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setGFWeight(0.5);
			}


			heuristic.execute();
			System.out.println((System.currentTimeMillis() - t1));

			//UIARA
			t1 = System.currentTimeMillis();
			inputSignal = signal.createSignal();
			heuristic = new AdGC(numberAmplifiers, linkInputPower, linLosses, function, 50);
			heuristic.setInitialization(new UniformInitializationAMPVOA(type));
			heuristic.setSelectionOp(new UiaraWeightSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setOsnrMetric(new OSNRMetric(inputSignal, linLosses));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);


			// When the selection uses weight
			if (heuristic.getSelectionOp() instanceof UiaraWeightSelection) {
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setNFWeight(1);
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setGFWeight(0.5);
			}


			heuristic.execute();
			System.out.println((System.currentTimeMillis() - t1));

		}
	}


	//System.out.println("\n\n");

}
