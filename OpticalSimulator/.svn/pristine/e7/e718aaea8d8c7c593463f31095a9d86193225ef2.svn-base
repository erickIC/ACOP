package br.upe.simulations;

import br.upe.base.AmplifierType;
import br.upe.base.Heuristic;
import br.upe.base.ObjectiveFunction;
import br.upe.heuristics.annealing.VOAFlexROADM;
import br.upe.heuristics.lossComp.LossComp;
import br.upe.heuristics.maxGain.MaxGain;
import br.upe.heuristics.uiara.UiaraHeuristic;
import br.upe.initializations.UniformInitialization;
import br.upe.metrics.BeckerNoiseFigureMetric;
import br.upe.metrics.SimpleFlatnessMetric;
import br.upe.metrics.SumPowerConsumption;
import br.upe.objfunctions.FixedFunction;
import br.upe.selection.QuadraticSelection;
import br.upe.selection.UiaraWeightSelection;
import br.upe.simulations.simsetups.SimulationSetup;
import br.upe.simulations.simsetups.UiaraImoc2013;

public class SimFixedNFandGF {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Heuristic heuristic;
		ObjectiveFunction function = new FixedFunction();
		SimulationSetup simSet = new UiaraImoc2013();
		float[] linLosses = simSet.getLINK_LOSSES();
		int numberAmplifiers = simSet.getNumberOfAmplifiers();
		AmplifierType type = AmplifierType.L17_80CH;
		
		float linkInputPower = -20.0f;//DecibelConverter.calculateInputPower(simSet.getCHANNELS(), simSet.getCHANNEL_POWER());

		int rateCh = 10; //Gbps
		int numberCh = 0;
		switch(type){
		case L17_10CH:
			numberCh = 10;
			break;
		case L17_20CH:
			numberCh = 20;
			break;
		case L17_40CH:
			numberCh = 40;
			break;
		case L17_80CH:
			numberCh = 80;
			break;
		}
		
		
		int runs = 1;

		for(int i=0; i<runs; i++){

			//VOAFlexROADM
			long t1 = System.currentTimeMillis();
			heuristic = new VOAFlexROADM(numberAmplifiers, linkInputPower, linLosses, function, 5);
			//heuristic = new MaxGain(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");
			
			//LOSSCOMP
			heuristic = new LossComp(numberAmplifiers, linkInputPower, linLosses, function, 1);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");
			
			
			//MaxGain
			//t1 = System.currentTimeMillis();
			heuristic = new MaxGain(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");
			
			//MaxGainWithout
			/*t1 = System.currentTimeMillis();
			heuristic = new MaxGainWithoutComm(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");*/

			//ANTIGO
			/*t1 = System.currentTimeMillis();
			heuristic = new AnnealingSearchHeuristicWithRestriction(numberAmplifiers, linkInputPower, linLosses, function, 50);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new MaxGainSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());

			heuristic.execute();
			System.out.println(System.currentTimeMillis() - t1);*/

			//UIARA
			t1 = System.currentTimeMillis();
			heuristic = new UiaraHeuristic(numberAmplifiers, linkInputPower, linLosses, function, 50);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new UiaraWeightSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());

			// When the selection uses weight
			if (heuristic.getSelectionOp() instanceof UiaraWeightSelection) {
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setNFWeight(1);
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setGFWeight(0.5);
			}


			heuristic.execute();
			System.out.println((System.currentTimeMillis() - t1));


		}


		//System.out.println("\n\n");
	}

}
