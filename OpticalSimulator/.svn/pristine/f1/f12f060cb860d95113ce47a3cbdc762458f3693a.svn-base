package br.upe.simulations.simPadTec;

import br.upe.base.Amplifier;
import br.upe.base.AmplifierType;
import br.upe.base.AmplifierVOA;
import br.upe.base.ObjectiveFunction;
import br.upe.base.OpticalChannel;
import br.upe.base.OpticalSignal;
import br.upe.objfunctions.linerInterpolation.LinearInterpolationFunction;
import br.upe.signal.factory.CustomSignal;
import br.upe.util.DecibelConverter;

public class SimPadTecWSignal {

    private static double calculateTilt(OpticalSignal signal) {
	double maxPeak = Double.MIN_VALUE;
	double minPeak = Double.MAX_VALUE;

	for (OpticalChannel c : signal.getChannels()) {
	    double signalLin = DecibelConverter.toLinearScale(c.getSignalPower());

	    if (signalLin > maxPeak) {
		maxPeak = signalLin;
	    }
	    if (signalLin < minPeak) {
		minPeak = signalLin;
	    }
	}

	return DecibelConverter.toDecibelScale(maxPeak / minPeak);
    }

    private static double calculateOSNR(OpticalSignal signal) {
	double minOSNR = Double.MAX_VALUE;
	for (OpticalChannel c : signal.getChannels()) {
	    double signalLin = DecibelConverter.toLinearScale(c.getSignalPower());
	    double noiseLin = DecibelConverter.toLinearScale(c.getNoisePower());
	    double OSNR = signalLin / noiseLin;

	    if (OSNR < minOSNR) {
		minOSNR = OSNR;
	    }
	}

	return DecibelConverter.toDecibelScale(minOSNR);
    }

    private static void linkTrasferFunction(float linkLoss, OpticalSignal signal) {
	for (OpticalChannel c : signal.getChannels()) {
	    // Signal Total Gain
	    double signalLin = DecibelConverter.toLinearScale(c.getSignalPower());
	    signalLin *= DecibelConverter.toLinearScale(-1 * linkLoss);
	    // Noise Gain
	    double noiseLin = DecibelConverter.toLinearScale(c.getNoisePower());
	    noiseLin *= DecibelConverter.toLinearScale(-1 * linkLoss);

	    c.setSignalPower(DecibelConverter.toDecibelScale(signalLin));
	    c.setNoisePower(DecibelConverter.toDecibelScale(noiseLin));
	}
    }

    public static void main(String[] args) {
	float inputPowerPerCh = -17.02f;
	float gain = 17f;
	int numberOfAmplifiers = 1;

	double[] frequency = { 192.1e12, 192.2e12, 192.3e12, 192.4e12, 192.5e12, 192.6e12, 192.7e12, 192.8e12, 192.9e12,
		193e12, 193.1e12, 193.2e12, 193.3e12, 193.4e12, 193.5e12, 193.6e12, 193.7e12, 193.8e12, 193.9e12,
		194e12, 194.1e12, 194.2e12, 194.3e12, 194.4e12, 194.5e12, 194.6e12, 194.7e12, 194.8e12, 194.9e12,
		195e12, 195.1e12, 195.2e12, 195.3e12, 195.4e12, 195.5e12, 195.6e12, 195.7e12, 195.8e12, 195.9e12,
		196e12 };
	double[] signalPower = {-17.021376, -17.024673, -17.028563, -17.020161, -17.025938, -17.022658, -17.025054, 
		-17.026735, -17.023562, -17.022899, -17.022075, -17.021966, -17.023717, -17.025799, -17.029875, -17.026543, 
		-17.022774, -17.022745, -17.028117, -17.024222, -17.020541, -17.023237, -17.024421, -17.029219, -17.025874, 
		-17.020958, -17.02213, -17.027321, -17.025781, -17.027935, -17.02151, -17.021924, -17.030486, -17.020971, -17.022614, 
		-17.024912, -17.021462, -17.026586, -17.021145, -17.028444}; 
	CustomSignal signal = new CustomSignal(frequency, signalPower, 40);
	OpticalSignal inputSignal = signal.createSignal();
	ObjectiveFunction functionAux = new LinearInterpolationFunction();

	double gfM = Double.MAX_VALUE;
	double osnrM = Double.MAX_VALUE;

	System.out.println("#Amps\tTilt\tOSNR");

	while (numberOfAmplifiers <= 20 && osnrM > 10.0) {
	    Amplifier[] amplifiers = new Amplifier[numberOfAmplifiers];
	    float[] linkLosses = new float[numberOfAmplifiers - 1];

	    OpticalSignal ampInput = inputSignal.clone();

	    for (int i = 0; i < amplifiers.length; i++) {
		if (i == amplifiers.length - 1) {
		    amplifiers[i] = new AmplifierVOA(ampInput.getTotalPower(), gain, AmplifierType.EDFA_2_PadTec);
		} else {
		    amplifiers[i] = new Amplifier(ampInput.getTotalPower(), gain, AmplifierType.EDFA_2_PadTec);
		    linkLosses[i] = gain;
		}

		functionAux.defineNewOperationPoint(amplifiers[i], ampInput);
		ampInput = amplifiers[i].transferFunction(ampInput);
		if (numberOfAmplifiers == 20)
		    System.out.println("#" + (i + 1) + "\t" + ampInput);
		linkTrasferFunction(gain, ampInput);
	    }

	    osnrM = calculateOSNR(ampInput);

	    gfM = calculateTilt(ampInput);

	    System.out.printf("%d\t%2.3f\t%2.3f\n", numberOfAmplifiers, gfM, osnrM);
	    numberOfAmplifiers++;

	}

    }
}
