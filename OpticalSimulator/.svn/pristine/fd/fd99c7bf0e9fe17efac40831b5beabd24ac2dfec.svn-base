package br.upe.simulations;

import br.upe.base.AmplifierType;
import br.upe.base.Heuristic;
import br.upe.base.ObjectiveFunction;
import br.upe.heuristics.AsHB.AsHBFlex;
import br.upe.initializations.UniformInitializationAMPVOA;
import br.upe.metrics.BeckerNoiseFigureMetric;
import br.upe.metrics.SimpleFlatnessMetric;
import br.upe.metrics.SumPowerConsumption;
import br.upe.objfunctions.rn.NNFunction;
import br.upe.selection.QuadraticSelection;
import br.upe.simulations.simsetups.SimulationSetup;
import br.upe.simulations.simsetups.UiaraImoc2013;
import br.upe.util.DecibelConverter;

public class SimVarChannels {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Heuristic heuristic;
		ObjectiveFunction function = new NNFunction();
		
		AmplifierType type = AmplifierType.L17_40CH;
		int rateCh = 10; //Gbps
		int numberCh = 10;
		switch(type){
		case L17_10CH:
			numberCh = 10;
			break;
		case L17_20CH:
			numberCh = 20;
			break;
		case L17_40CH:
			numberCh = 40;
			break;
		case L17_80CH:
			numberCh = 80;
			break;
		}

		SimulationSetup simSet = new UiaraImoc2013(numberCh, -21.0f, 1f);
		float[] linLosses = simSet.getLINK_LOSSES();
		int numberAmplifiers = simSet.getNumberOfAmplifiers();
		
		//Definindo ganho máximo
		float maxPout = simSet.getMaxOutputPower();
		System.out.println(maxPout);
		
		float linkInputPower = DecibelConverter.calculateInputPower(simSet.getCHANNELS(), simSet.getCHANNEL_POWER());
		
		int runs = 1;

		for(int i=0; i<runs; i++){


			//VOAFlexROADM
			long t1 = System.currentTimeMillis();
			heuristic = new AsHBFlex(numberAmplifiers, linkInputPower, linLosses, function, 5);
			//heuristic.setInitialization(new UniformInitializationMaxPower(type,maxPout));
			heuristic.setInitialization(new UniformInitializationAMPVOA(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);


			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");
			
			//LOSSCOMP
			/*heuristic = new LossComp(numberAmplifiers, linkInputPower, linLosses, function, 1);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");*/
			
			
			//MaxGain
			//t1 = System.currentTimeMillis();
			/*heuristic = new MaxGain(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");*/
			
			//MaxGainAMPVOA
			/*t1 = System.currentTimeMillis();
			heuristic = new MaxGain(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitializationAMPVOA(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(20.0f);
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();

			System.out.println((System.currentTimeMillis() - t1));

			System.out.println(" ");
*/
			//ANTIGO
			/*t1 = System.currentTimeMillis();
			heuristic = new AnnealingSearchHeuristicWithRestriction(numberAmplifiers, linkInputPower, linLosses, function, 5);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new QuadraticSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);

			heuristic.execute();
			System.out.println(System.currentTimeMillis() - t1);*/

			//UIARA
			/*t1 = System.currentTimeMillis();
			heuristic = new AdGC(numberAmplifiers, linkInputPower, linLosses, function, 50);
			heuristic.setInitialization(new UniformInitialization(type));
			heuristic.setSelectionOp(new UiaraWeightSelection());
			heuristic.setFlatnessMetric(new SimpleFlatnessMetric());
			heuristic.setNoiseFigureMetric(new BeckerNoiseFigureMetric(linLosses));
			heuristic.setPowerConsumptionMetric(new SumPowerConsumption(numberCh, rateCh));
			heuristic.setVoaMaxAttenuation(simSet.getVOA_MAX_ATT());
			heuristic.setRoadmAttenuation(simSet.getROADM_ATT());
			heuristic.setMaxOutputPower(maxPout);


			// When the selection uses weight
			if (heuristic.getSelectionOp() instanceof UiaraWeightSelection) {
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setNFWeight(1);
				((UiaraWeightSelection) heuristic.getSelectionOp())
				.setGFWeight(0.5);
			}


			heuristic.execute();
			System.out.println((System.currentTimeMillis() - t1));*/


		}


		//System.out.println("\n\n");
	}

}
