package br.upe.base;

import br.upe.signal.factory.CustomSignal;
import br.upe.util.DecibelConverter;

public class Fiber {

    public FiberType type;
    public float attenuation;

    public Fiber(FiberType type, float attenuation) {
	super();
	this.type = type;
	this.attenuation = attenuation;
    }

    public FiberType getType() {
	return type;
    }

    public void setType(FiberType type) {
	this.type = type;
    }

    public float getAttenuation() {
	return attenuation;
    }

    public void setAttenuation(float attenuation) {
	this.attenuation = attenuation;
    }

    public OpticalSignal linkTrasferFunction(OpticalSignal signal) {
	OpticalSignal result = signal.clone();
	double[] channelAttenuation = getChannelAttenuation(signal);
	int i = 0;
	for (OpticalChannel c : result.getChannels()) {
	    // Signal Total Gain
	    double signalLin = DecibelConverter.toLinearScale(c.getSignalPower());
	    signalLin *= DecibelConverter.toLinearScale(-1 * channelAttenuation[i]);
	    // Noise Gain
	    double noiseLin = DecibelConverter.toLinearScale(c.getNoisePower());
	    noiseLin *= DecibelConverter.toLinearScale(-1 * channelAttenuation[i++]);

	    c.setSignalPower(DecibelConverter.toDecibelScale(signalLin));
	    c.setNoisePower(DecibelConverter.toDecibelScale(noiseLin));
	}

	return result;
    }

    private double[] getChannelAttenuation(OpticalSignal signal) {
	double[] channelAttenuation = new double[signal.getChannels().size()];
	int ch = 0;
	for (OpticalChannel c : signal.getChannels()) {
	    double frequency = c.getFrequency();

	    double[] frequencies = getFrequencyVector();
	    int index = 0;
	    for (int i = 1; i < frequencies.length; i++) {
		if (frequencies[i] < (frequency / 1e12)) {
		    break;
		}
		index = i; // When we are looking for the last frequency
	    }

	    channelAttenuation[ch++] = getAttenuationVector()[index];
	}

	double meanAttenuation = channelAttenuation[0];
	for (int i = 1; i < channelAttenuation.length; i++) {
	    meanAttenuation += channelAttenuation[i];
	}
	meanAttenuation /= channelAttenuation.length;

	for (int i = 0; i < channelAttenuation.length; i++) {
	    channelAttenuation[i] *= (attenuation / meanAttenuation);
	}

	return channelAttenuation;
    }

    private double[] getAttenuationVector() {
	switch (type) {
	case SMF_28:
	default:
	    return new double[] { 0.3140528617, 0.30915942189, 0.30461137157, 0.30037969141, 0.296437113, 0.29275830401,
		    0.28931992765, 0.28610061873, 0.2830809065, 0.28024310588, 0.27757119186, 0.27505066739,
		    0.27266843136, 0.27041265098, 0.26827264117, 0.26623875236, 0.26430226723, 0.26245530651,
		    0.26069074369, 0.25900212794, 0.25738361487, 0.25582990449, 0.25433618553, 0.25289808583,
		    0.25151162788, 0.25017318924, 0.24887946709, 0.24762744667, 0.24641437307, 0.245237726,
		    0.24409519721, 0.24298467042, 0.24190420315, 0.24085201063, 0.23982645124, 0.23882601347,
		    0.23784930429, 0.23689503852, 0.23596202941, 0.23504918008, 0.23415547581, 0.23327997706,
		    0.23242181319, 0.23158017674, 0.23075431828, 0.22994354172, 0.22914720005, 0.22836469147,
		    0.2275954559, 0.22683897174, 0.22609475294, 0.22536234641, 0.22464132948, 0.22393130777,
		    0.22323191307, 0.22254280155, 0.221863652, 0.22119416426, 0.22053405781, 0.21988307044, 0.219240957,
		    0.21860748831, 0.21798245012, 0.21736564215, 0.21675687722, 0.21615598043, 0.21556278842,
		    0.21497714866, 0.21439891883, 0.21382796622, 0.21326416717, 0.21270740657, 0.21215757737,
		    0.21161458018, 0.21107832281, 0.21054871995, 0.21002569277, 0.2095091686, 0.20899908065,
		    0.20849536772, 0.20799797391, 0.20750684843, 0.20702194529, 0.20654322317, 0.20607064516,
		    0.20560417863, 0.20514379501, 0.20468946963, 0.20424118163, 0.20379891373, 0.20336265219,
		    0.20293238661, 0.20250810989, 0.20208981806, 0.2016775102, 0.2012711884, 0.20087085759,
		    0.20047652553, 0.20008820268, 0.1997059022, 0.19932963981, 0.19895943379, 0.19859530489,
		    0.19823727631, 0.19788537361, 0.19753962472, 0.19720005984, 0.19686671147, 0.19653961432,
		    0.19621880532, 0.19590432354, 0.19559621024, 0.19529450878, 0.19499926464, 0.19471052536,
		    0.1944283406, 0.19415276202, 0.19388384336, 0.1936216404, 0.19336621091, 0.19311761471,
		    0.19287591363, 0.19264117149, 0.19241345413, 0.1921928294, 0.19197936715, 0.19177313923,
		    0.19157421952, 0.19138268388, 0.19119861023, 0.19102207849, 0.19085317063, 0.19069197063,
		    0.19053856455, 0.19039304051, 0.19025548869, 0.19012600136, 0.19000467288, 0.18989159974,
		    0.18978688053, 0.18969061601, 0.18960290908, 0.18952386482, 0.1894535905, 0.18939219562,
		    0.18933979188, 0.18929649327, 0.18926241601, 0.18923767866, 0.18922240207, 0.18921670942,
		    0.18922072628, 0.1892345806, 0.18925840273, 0.18929232548, 0.1893364841, 0.18939101635,
		    0.1894560625, 0.18953176537, 0.18961827037, 0.18971572548, 0.18982428136, 0.18994409131,
		    0.19007531133, 0.19021810014, 0.19037261925, 0.19053903295, 0.19071750834, 0.19090821541,
		    0.19111132704, 0.19132701904, 0.19155547019, 0.19179686227, 0.19205138011, 0.19231921162,
		    0.19260054783, 0.19289558293, 0.1932045143, 0.19352754257, 0.19386487164, 0.19421670873,
		    0.19458326444, 0.19496475275, 0.19536139111, 0.19577340045, 0.19620100524, 0.19664443355,
		    0.19710391704, 0.19757969109, 0.19807199477, 0.19858107094, 0.19910716627, 0.19965053129,
		    0.20021142047, 0.20079009221, 0.20138680898, 0.20200183727, 0.20263544773, 0.20328791517,
		    0.20395951863, 0.20465054144, 0.20536127126, 0.20609200016, 0.20684302466, 0.20761464577,
		    0.20840716908, 0.20922090482, 0.21005616789, 0.21091327794, 0.21179255941, 0.21269434164,
		    0.21361895889, 0.21456675039, 0.21553806046, 0.21653323853, 0.21755263922, 0.21859662239,
		    0.21966555326, 0.22075980239, 0.22187974583, 0.22302576516, 0.22419824754, 0.22539758582,
		    0.22662417857, 0.22787843018, 0.22916075095, 0.23047155712, 0.23181127097, 0.2331803209,
		    0.2345791415, 0.23600817364, 0.23746786451, 0.23895866775, 0.24048104352, 0.24203545856,
		    0.24362238626, 0.24524230681, 0.24689570721, 0.2485830814, 0.25030493033, 0.25206176207,
		    0.25385409184, 0.25568244218, 0.25754734298, 0.25944933159, 0.26138895291, 0.26336675951,
		    0.26538331168, 0.26743917755, 0.26953493319 };
	}
    }

    private double[] getFrequencyVector() {
	switch(type) {
	case SMF_28:
	default:
	    return new double[] { 214.13747, 213.984623840114, 213.831995720399, 213.679585174626, 213.527391737892,
		    213.375414946619, 213.223654338549, 213.072109452736, 212.920779829545, 212.769665010646,
		    212.618764539007, 212.468077958894, 212.317604815864, 212.167344656759, 212.017297029703,
		    211.867461484099, 211.717837570621, 211.568424841214, 211.419222849083, 211.270231148696,
		    211.121449295775, 210.972876847291, 210.824513361463, 210.676358397751, 210.528411516854,
		    210.380672280702, 210.233140252454, 210.085814996496, 209.938696078431, 209.79178306508,
		    209.645075524475, 209.498573025856, 209.352275139665, 209.206181437544, 209.060291492329,
		    208.914604878049, 208.769121169916, 208.623839944328, 208.478760778859, 208.333883252258,
		    208.189206944444, 208.044731436502, 207.90045631068, 207.756381150381, 207.612505540166,
		    207.468829065744, 207.32535131397, 207.18207187284, 207.038990331492, 206.896106280193,
		    206.753419310345, 206.610929014473, 206.468634986226, 206.326536820372, 206.184634112792,
		    206.042926460481, 205.901413461538, 205.760094715168, 205.618969821674, 205.478038382454, 205.3373,
		    205.196754277892, 205.056400820793, 204.91623923445, 204.776269125683, 204.636490102389,
		    204.496901773533, 204.357503749148, 204.218295640327, 204.079277059224, 203.940447619048,
		    203.801806934058, 203.663354619565, 203.525090291921, 203.387013568521, 203.249124067797,
		    203.111421409214, 202.97390521327, 202.836575101488, 202.699430696416, 202.562471621622,
		    202.425697501688, 202.289107962213, 202.152702629804, 202.016481132075, 201.880443097643,
		    201.744588156124, 201.60891593813, 201.473426075269, 201.338118200134, 201.202991946309,
		    201.068046948357, 200.933282841823, 200.798699263228, 200.664295850067, 200.530072240803,
		    200.396028074866, 200.262162992652, 200.128476635514, 199.994968645764, 199.861638666667,
		    199.728486342438, 199.595511318242, 199.462713240186, 199.330091755319, 199.197646511628,
		    199.065377158035, 198.933283344393, 198.801364721485, 198.669620941021, 198.538051655629,
		    198.406656518862, 198.275435185185, 198.14438730998, 198.013512549538, 197.882810561056,
		    197.752281002639, 197.621923533289, 197.491737812912, 197.361723502304, 197.231880263158,
		    197.102207758054, 196.97270565046, 196.843373604727, 196.714211286089, 196.585218360656,
		    196.456394495413, 196.327739358219, 196.199252617801, 196.070933943754, 195.942783006536,
		    195.814799477466, 195.686983028721, 195.559333333333, 195.431850065189, 195.304532899023,
		    195.177381510417, 195.050395575797, 194.923574772432, 194.796918778428, 194.670427272727,
		    194.544099935107, 194.417936446174, 194.291936487362, 194.166099740933, 194.040425889968,
		    193.91491461837, 193.78956561086, 193.664378552972, 193.539353131052, 193.414489032258,
		    193.289785944552, 193.165243556701, 193.040861558274, 192.91663963964, 192.792577491961,
		    192.668674807198, 192.544931278099, 192.421346598203, 192.297920461834, 192.174652564103,
		    192.051542600897, 191.928590268886, 191.805795265515, 191.683157289003, 191.560676038339,
		    191.438351213282, 191.316182514359, 191.194169642857, 191.072312300829, 190.950610191083,
		    190.829063017186, 190.707670483461, 190.586432294978, 190.46534815756, 190.344417777778,
		    190.223640862944, 190.103017121116, 189.98254626109, 189.8622279924, 189.742062025316,
		    189.622048070841, 189.502185840708, 189.382475047378, 189.26291540404, 189.143506624606,
		    189.024248423707, 188.905140516698, 188.786182619647, 188.667374449339, 188.54871572327,
		    188.430206159648, 188.311845477387, 188.193633396108, 188.075569636136, 187.957653918495,
		    187.839885964912, 187.722265497808, 187.6047922403, 187.487465916198, 187.37028625,
		    187.253252966896, 187.136365792759, 187.019624454148, 186.903028678304, 186.786578193146,
		    186.670272727273, 186.554112009956, 186.438095771144, 186.322223741454, 186.206495652174,
		    186.090911235258, 185.975470223325, 185.860172349659, 185.745017348203, 185.63000495356,
		    185.51513490099, 185.400406926407, 185.285820766378, 185.171376158122, 185.057072839506,
		    184.942910549044, 184.828889025894, 184.715008009858, 184.601267241379, 184.487666461538,
		    184.374205412054, 184.26088383528, 184.147701474201, 184.034658072437, 183.921753374233,
		    183.808987124464, 183.696359068627, 183.583868952848, 183.471516523868, 183.359301529052,
		    183.247223716381, 183.135282834453, 183.023478632479, 182.911810860281, 182.800279268293,
		    182.688883607556, 182.57762362972, 182.466499087036, 182.35550973236, 182.244655319149,
		    182.133935601458, 182.023350333941, 181.912899271845, 181.802582171013 };
	}
    }

    public static void main(String[] args) {
	double[] frequencies = new double[40];
	double[] signalPower = new double[40];
	frequencies[0] = 192.1 * 1e12;
	for (int i = 1; i < frequencies.length; i++) {
	    frequencies[i] = frequencies[i - 1] + 0.1 * 1e12;
	    signalPower[i] = 0;
	}
	
	CustomSignal signal = new CustomSignal(frequencies, signalPower, 40);
	OpticalSignal inputSignal = signal.createSignal();
	
	Fiber fiber = new Fiber(FiberType.SMF_28, 20);

	inputSignal = fiber.linkTrasferFunction(inputSignal);

	for (int i = 0; i < inputSignal.getChannels().size(); i++) {
	    System.out.println(inputSignal.getChannels().get(i));
	}
	
    }
}
