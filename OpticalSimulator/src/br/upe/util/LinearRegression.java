package br.upe.util;

/******************************************************************************
 *  Compilation:  javac LinearRegression.java
 *  Execution:    java  LinearRegression
 *  Dependencies: none
 *  
 *  Compute least squares solution to y = beta * x + alpha.
 *  Simple linear regression.
 *
 ******************************************************************************/

/**
 * The {@code LinearRegression} class performs a simple linear regression on an
 * set of <em>n</em> data points (<em>y<sub>i</sub></em>, <em>x<sub>i</sub></em>
 * ). That is, it fits a straight line <em>y</em> = &alpha; + &beta; <em>x</em>,
 * (where <em>y</em> is the response variable, <em>x</em> is the predictor
 * variable, &alpha; is the <em>y-intercept</em>, and &beta; is the
 * <em>slope</em>) that minimizes the sum of squared residuals of the linear
 * regression model. It also computes associated statistics, including the
 * coefficient of determination <em>R</em><sup>2</sup> and the standard
 * deviation of the estimates for the slope and <em>y</em>-intercept.
 *
 * @author Robert Sedgewick
 * @author Kevin Wayne
 */
public class LinearRegression {
    private double intercept, slope;
    private double r2;
    private double svar0, svar1;
    private double tilt;
    private boolean exponential;

    public LinearRegression(double[] x, double[] y, boolean exponential) {
	if (exponential) {
	    for (int i = 0; i < y.length; i++) {
		y[i] = Math.log(y[i]);
	    }
	}

	execute(x, y);

	intercept = Math.exp(intercept);
    }

    public LinearRegression(double[] x, double[] y) {
	execute(x, y);
    }

    /**
     * Performs a linear regression on the data points {@code (y[i], x[i])}.
     *
     * @param x
     *            the values of the predictor variable
     * @param y
     *            the corresponding values of the response variable
     * @throws IllegalArgumentException
     *             if the lengths of the two arrays are not equal
     */
    private void execute(double[] x, double[] y) {
	if (x.length != y.length) {
	    throw new IllegalArgumentException("array lengths are not equal");
	}
	int n = x.length;

	// first pass
	double sumx = 0.0, sumy = 0.0, sumx2 = 0.0;
	for (int i = 0; i < n; i++) {
	    sumx += x[i];
	    sumx2 += x[i] * x[i];
	    sumy += y[i];
	}
	double xbar = sumx / n;
	double ybar = sumy / n;

	// second pass: compute summary statistics
	double xxbar = 0.0, yybar = 0.0, xybar = 0.0;
	for (int i = 0; i < n; i++) {
	    xxbar += (x[i] - xbar) * (x[i] - xbar);
	    yybar += (y[i] - ybar) * (y[i] - ybar);
	    xybar += (x[i] - xbar) * (y[i] - ybar);
	}

	slope = xybar / xxbar;
	intercept = ybar - slope * xbar;

	// more statistical analysis
	double rss = 0.0; // residual sum of squares
	double ssr = 0.0; // regression sum of squares
	for (int i = 0; i < n; i++) {
	    double fit = slope * x[i] + intercept;
	    rss += (fit - y[i]) * (fit - y[i]);
	    ssr += (fit - ybar) * (fit - ybar);
	}

	int degreesOfFreedom = n - 2;
	r2 = ssr / yybar;
	double svar = rss / degreesOfFreedom;
	svar1 = svar / xxbar;
	svar0 = svar / n + xbar * xbar * svar1;

	tilt = (slope * x[0] + intercept) - (slope * x[x.length - 1] + intercept);
    }

    /**
     * Returns the <em>y</em>-intercept &alpha; of the best of the best-fit line
     * <em>y</em> = &alpha; + &beta; <em>x</em>.
     *
     * @return the <em>y</em>-intercept &alpha; of the best-fit line
     *         <em>y = &alpha; + &beta; x</em>
     */
    public double intercept() {
	return intercept;
    }

    /**
     * Returns the slope &beta; of the best of the best-fit line <em>y</em> =
     * &alpha; + &beta; <em>x</em>.
     *
     * @return the slope &beta; of the best-fit line <em>y</em> = &alpha; +
     *         &beta; <em>x</em>
     */
    public double slope() {
	return slope;
    }

    /**
     * Returns the coefficient of determination <em>R</em><sup>2</sup>.
     *
     * @return the coefficient of determination <em>R</em><sup>2</sup>, which is
     *         a real number between 0 and 1
     */
    public double R2() {
	return r2;
    }

    public double Tilt() {
	return tilt;
    }

    /**
     * Returns the standard error of the estimate for the intercept.
     *
     * @return the standard error of the estimate for the intercept
     */
    public double interceptStdErr() {
	return Math.sqrt(svar0);
    }

    /**
     * Returns the standard error of the estimate for the slope.
     *
     * @return the standard error of the estimate for the slope
     */
    public double slopeStdErr() {
	return Math.sqrt(svar1);
    }

    /**
     * Returns the expected response {@code y} given the value of the predictor
     * variable {@code x}.
     *
     * @param x
     *            the value of the predictor variable
     * @return the expected response {@code y} given the value of the predictor
     *         variable {@code x}
     */
    public double predict(double x) {
	return slope * x + intercept;
    }

    /**
     * Returns a string representation of the simple linear regression model.
     *
     * @return a string representation of the simple linear regression model,
     *         including the best-fit line and the coefficient of determination
     *         <em>R</em><sup>2</sup>
     */
    public String toString() {
	StringBuilder s = new StringBuilder();
	if (!exponential) {
	    s.append(String.format("%.2f n + %.2f", slope(), intercept()));
	    s.append("  (R^2 = " + String.format("%.3f", R2()) + ")");
	} else {
	    s.append(String.format("%.2f ^ n * %.2f", slope(), intercept()));
	    s.append("  (R^2 = " + String.format("%.3f", R2()) + ")");
	}
	return s.toString();
    }

    public static void main(String args[]) {
	double[] x = { 0.0, 0.02564102564102564, 0.05128205128205128, 0.07692307692307693, 0.10256410256410256,
		0.1282051282051282, 0.15384615384615385, 0.1794871794871795, 0.20512820512820512, 0.23076923076923078,
		0.2564102564102564, 0.28205128205128205, 0.3076923076923077, 0.3333333333333333, 0.358974358974359,
		0.38461538461538464, 0.41025641025641024, 0.4358974358974359, 0.46153846153846156, 0.48717948717948717,
		0.5128205128205128, 0.5384615384615384, 0.5641025641025641, 0.5897435897435898, 0.6153846153846154,
		0.6410256410256411, 0.6666666666666666, 0.6923076923076923, 0.717948717948718, 0.7435897435897436,
		0.7692307692307693, 0.7948717948717948, 0.8205128205128205, 0.8461538461538461, 0.8717948717948718,
		0.8974358974358975, 0.9230769230769231, 0.9487179487179487, 0.9743589743589743, 1.0 };
	double[] y1 = { 1.1560329, 1.0714484, 1.0036427, 0.93333286, 0.8752127, 0.82448441, 0.77166348, 0.7232532,
		0.68261208, 0.6370073, 0.58835287, 0.53751586, 0.48340088, 0.426405, 0.36634945, 0.29997333, 0.23065489,
		0.16692102, 0.10175056, 0.028900271, -0.027269955, -0.089283683, -0.13716833, -0.17954844, -0.22050267,
		-0.25935986, -0.30974647, -0.38272661, -0.49103402, -0.64433469, -0.85395595, -1.1142704, -1.4071894,
		-1.7245306, -2.0227434, -2.281203, -2.4903202, -2.6459907, -2.7363534, -2.7672357 };
	double[] y2 = { 2.3027204, 2.1371, 1.9950984, 1.8575043, 1.7388138, 1.6331783, 1.5303964, 1.4355991, 1.3496132,
		1.2581061, 1.1620036, 1.0609277, 0.95281953, 0.83793263, 0.71644718, 0.58512447, 0.44798799, 0.31518922,
		0.18111968, 0.040988885, -0.078448864, -0.19776066, -0.29588998, -0.38162665, -0.46165595, -0.54153251,
		-0.64401246, -0.79107586, -1.0080326, -1.3169349, -1.7367658, -2.2593788, -2.8532248, -3.4858134,
		-4.0855989, -4.6081078, -5.0285229, -5.33617, -5.5187742, -5.5838545 };
	double[] y3 = { 3.2905106, 3.0400982, 2.8204629, 2.6124629, 2.4303881, 2.2672915, 2.1122223, 1.9688753,
		1.8354291, 1.6958773, 1.5501124, 1.3964543, 1.2318351, 1.0563593, 0.87058181, 0.67128726, 0.46317416,
		0.25809347, 0.051914418, -0.15863352, -0.34429152, -0.52357965, -0.67430759, -0.80543753, -0.92638156,
		-1.0492082, -1.2062268, -1.4308367, -1.7615065, -2.2332442, -2.8730234, -3.6701009, -4.5788292,
		-5.5412862, -6.4566336, -7.2554424, -7.8969741, -8.3637001, -8.6428668, -8.7437743 };
	double[] y4 = { 4.0753979, 3.7353962, 3.4337356, 3.151342, 2.9022884, 2.6784679, 2.4681395, 2.2734795,
		2.0898698, 1.8995363, 1.7012796, 1.4920454, 1.267698, 1.0281864, 0.77446009, 0.50332858, 0.22020343,
		-0.061269329, -0.34365963, -0.62863231, -0.8842833, -1.12697, -1.3333048, -1.512431, -1.6766411,
		-1.8448855, -2.0595678, -2.3661494, -2.8170017, -3.4608158, -4.3329837, -5.4200667, -6.6615035,
		-7.972506, -9.2212852, -10.312044, -11.187235, -11.822115, -12.203366, -12.342184 };
	double[] y5 = { 4.8934816, 4.464674, 4.081705, 3.7255686, 3.4101225, 3.1261102, 2.8610071, 2.6154843, 2.3821516,
		2.1414822, 1.8911946, 1.6268721, 1.3433207, 1.0403351, 0.71925595, 0.37691746, 0.019438045, -0.33775686,
		-0.69568993, -1.0544343, -1.3794637, -1.6849918, -1.9464438, -2.173143, -2.3802372, -2.5934982,
		-2.8653359, -3.2531685, -3.8231486, -4.6375317, -5.7400585, -7.1146106, -8.6858466, -10.342347,
		-11.921642, -13.301797, -14.408603, -15.210157, -15.692593, -15.868986 };
	double[] y6 = { 5.5210547, 4.9989396, 4.5305417, 4.0969215, 3.7117109, 3.3644465, 3.0417814, 2.7428048,
		2.4572144, 2.1636427, 1.8586712, 1.536453, 1.190681, 0.82098893, 0.42912764, 0.01195745, -0.42366073,
		-0.86043231, -1.2977547, -1.7340287, -2.131974, -2.5035519, -2.8229408, -3.0996523, -3.3518335,
		-3.6124233, -3.9443453, -4.4175777, -5.112753, -6.1063734, -7.4509297, -9.127531, -11.045291, -13.06481,
		-14.991386, -16.675618, -18.025804, -19.002542, -19.59134, -19.807256 };
	double[] y7 = { -3.6992614, -3.5423332, -3.399385, -3.270592, -3.154459, -3.0412161, -2.9436973, -2.851886,
		-2.7603328, -2.6724996, -2.5796378, -2.4790427, -2.3729436, -2.2569924, -2.1372218, -2.0099424,
		-1.8733153, -1.7360602, -1.6034446, -1.4673989, -1.3427007, -1.2297695, -1.1284934, -1.0385572,
		-0.95591804, -0.8748087, -0.77574139, -0.62077403, -0.4031011, -0.10507036, 0.30580832, 0.81031071,
		1.3966914, 2.0093459, 2.5932293, 3.1059231, 3.5147765, 3.8167881, 4.0069105, 4.0781549 };
	double[] y8 = { -4.2969747, -4.1198971, -3.9585395, -3.8130186, -3.6816296, -3.5545407, -3.444375, -3.3407561,
		-3.2376289, -3.1380611, -3.0330709, -2.9196689, -2.7998099, -2.6691483, -2.5337845, -2.3900342,
		-2.2362161, -2.0814494, -1.9313424, -1.7781702, -1.637298, -1.5096283, -1.3953053, -1.2940238,
		-1.2010017, -1.1090398, -0.99632823, -0.82227934, -0.57685718, -0.23976456, 0.22314463, 0.79300583,
		1.4542983, 2.1453805, 2.8045208, 3.3830345, 3.8449069, 4.186064, 4.4000496, 4.4807916 };
	double[] y9 = { -4.914471, -4.7178278, -4.5385949, -4.3768309, -4.2306226, -4.0900838, -3.9676318, -3.8525401,
		-3.7381665, -3.6271958, -3.5104201, -3.3845739, -3.2513451, -3.1063911, -2.9558776, -2.796125,
		-2.6256055, -2.4538258, -2.2867246, -2.1169118, -1.9603228, -1.8183288, -1.6913227, -1.5790102,
		-1.4758887, -1.3733721, -1.2473939, -1.0547994, -0.78241317, -0.40738094, 0.10604704, 0.73937767,
		1.4734147, 2.2406537, 2.9728792, 3.6153114, 4.1286801, 4.5078826, 4.7450638, 4.8350541 };
	double[] y10 = { -5.5209685, -5.3053248, -5.1087334, -4.9311952, -4.7705901, -4.6169846, -4.4825949, -4.3563544,
		-4.2310511, -4.1089982, -3.9807684, -3.8428288, -3.6966072, -3.5377651, -3.3725306, -3.1972292,
		-3.0104816, -2.8221709, -2.6385566, -2.4525729, -2.2807091, -2.1247913, -1.9854537, -1.8624137,
		-1.7494668, -1.6366829, -1.4978031, -1.2871812, -0.98859015, -0.5767039, -0.014219619, 0.68075247,
		1.4854374, 2.326636, 3.1298458, 3.8343572, 4.3977492, 4.8139331, 5.0736649, 5.1726631 };
	double[] y11 = { -6.0905396, -5.8564373, -5.6429829, -5.4501201, -5.275523, -5.1092176, -4.963224, -4.8261446,
		-4.6902146, -4.557386, -4.4180191, -4.2683217, -4.1094681, -3.9371245, -3.7575795, -3.5671631,
		-3.3646405, -3.1602601, -2.9605929, -2.7588877, -2.572172, -2.4027131, -2.2513797, -2.1179019,
		-1.9953909, -1.8726138, -1.7211808, -1.4930268, -1.1689579, -0.72125744, -0.11111828, 0.64374328,
		1.5170664, 2.4301188, 3.3022995, 4.0671279, 4.6791329, 5.1312801, 5.4129462, 5.5207244 };
	double[] y12 = { -6.6920071, -6.4399614, -6.2101153, -6.0023554, -5.8141515, -5.6354956, -5.4782157, -5.3305926,
		-5.1843245, -5.0410126, -4.8908106, -4.7296751, -4.5585333, -4.3730566, -4.1795918, -3.9744735,
		-3.7566076, -3.5365968, -3.321315, -3.1043165, -2.9031516, -2.7205167, -2.5575077, -2.4138687,
		-2.282043, -2.1495347, -1.985881, -1.7406671, -1.3918122, -0.90928729, -0.2528266, 0.56025782,
		1.5003074, 2.4832104, 3.4224467, 4.2459152, 4.9051905, 5.3923314, 5.695344, 5.8116836 };
	double[] y13 = { -7.3140923, -7.044589, -6.7987955, -6.5765417, -6.3750943, -6.1844174, -6.0161514, -5.8582632,
		-5.7019296, -5.5484102, -5.3876584, -5.2153866, -5.0322809, -4.8340189, -4.6270033, -4.4075733,
		-4.1747711, -3.9395447, -3.7090622, -3.4771745, -3.2619408, -3.0664745, -2.8920926, -2.7385537,
		-2.5976494, -2.4556574, -2.2800973, -2.0182694, -1.6452819, -1.1288661, -0.42734152, 0.44239389,
		1.447367, 2.4982313, 3.5027164, 4.3832433, 5.0885221, 5.6097411, 5.9335449, 6.0582386 };
	double[] y14 = { -7.9089207, -7.6232281, -7.3615598, -7.1253384, -6.9143484, -6.7087364, -6.529035, -6.3625192,
		-6.1973736, -6.0327607, -5.864745, -5.6773639, -5.4862379, -5.2725173, -5.0514081, -4.8214009,
		-4.5722018, -4.3205036, -4.0829844, -3.8319919, -3.6009185, -3.396378, -3.2095353, -3.0446584,
		-2.8966962, -2.7465906, -2.5644371, -2.2779906, -1.8823377, -1.3375686, -0.5854883, 0.33041561,
		1.4058525, 2.5218882, 3.5906999, 4.5274444, 5.2696942, 5.8265522, 6.1754256, 6.3069549 };
	double[] y15 = { -8.4686101, -8.1663464, -7.8895384, -7.6395559, -7.4159821, -7.1989471, -7.0088037, -6.8325279,
		-6.6578107, -6.4834903, -6.3054415, -6.107471, -5.9049695, -5.6790938, -5.4451027, -5.2014911,
		-4.9380942, -4.6719324, -4.4199629, -4.1548136, -3.9103605, -3.6936127, -3.4959444, -3.32164, -3.165025,
		-3.0058829, -2.8123912, -2.510138, -2.0915371, -1.5145718, -0.71971267, 0.24998588, 1.3870709,
		2.5676357, 3.6984146, 4.6893446, 5.4752982, 6.0645764, 6.4332353, 6.5727609 };
	double[] y16 = { -9.0917773, -8.7725203, -8.48128, -8.2177179, -7.9784973, -7.7535317, -7.5539212, -7.3667371,
		-7.1816723, -6.9990143, -6.8081468, -6.6040895, -6.3868375, -6.1520905, -5.9064072, -5.6461406,
		-5.3707215, -5.0920795, -4.818221, -4.5438403, -4.2884452, -4.0563373, -3.8494619, -3.6676263,
		-3.5007511, -3.3316362, -3.1220437, -2.8127709, -2.3709008, -1.7578407, -0.92790026, 0.10331804,
		1.2933458, 2.5379135, 3.7284109, 4.7715922, 5.6080606, 6.2265895, 6.6097839, 6.7584338 };
	double[] y17 = { -9.7338229, -9.3987551, -9.0930736, -8.8163843, -8.5651516, -8.3292815, -8.1197008, -7.9231955,
		-7.728988, -7.5370569, -7.3366054, -7.1224341, -6.8943171, -6.6479626, -6.3899779, -6.1167207,
		-5.8277449, -5.5352919, -5.2476341, -4.9597333, -4.6915573, -4.4477849, -4.2305609, -4.0397098,
		-3.8645542, -3.6867933, -3.4663577, -3.1419807, -2.6781905, -2.0344032, -1.163661, -0.081118926,
		1.1677217, 2.4738477, 3.7234712, 4.8183506, 5.6965304, 6.3460371, 6.7481429, 6.9044471 };
	double[] y18 = { -10.29045, -9.9399128, -9.6201027, -9.3305698, -9.0675801, -8.8210368, -8.6016961, -8.3960648,
		-8.1929055, -7.9918943, -7.7820585, -7.5579844, -7.3192296, -7.0615113, -6.7914838, -6.5055092,
		-6.2032622, -5.8972888, -5.5961218, -5.2949838, -5.0142931, -4.7590972, -4.5317359, -4.3320516,
		-4.1487796, -3.962545, -3.7314855, -3.3923162, -2.9070639, -2.2332048, -1.3225445, -0.18978362,
		1.1166025, 2.4829588, 3.7904387, 4.9359052, 5.8549074, 6.5347506, 6.9553802, 7.119196 };
	double[] y19 = { -10.910415, -10.544724, -10.211073, -9.908958, -9.6344468, -9.3774439, -9.1485377, -8.9339612,
		-8.7220268, -8.5121147, -8.2930795, -8.0592984, -7.8101163, -7.5412596, -7.2594285, -6.9609895,
		-6.6457354, -6.3265105, -6.0121026, -5.6979896, -5.405031, -5.1386353, -4.901333, -4.6929852,
		-4.5017502, -4.3072029, -4.0657234, -3.7120511, -3.2057602, -2.5024346, -1.5526713, -0.37071001,
		0.99205333, 2.4174157, 3.7815813, 4.9766096, 5.935613, 6.6451991, 7.0839919, 7.2551842 };
	double[] y20 = { -11.542635, -11.162079, -10.814853, -10.500396, -10.21458, -9.9473141, -9.7090218, -9.4856667,
		-9.26512, -9.0464719, -8.818408, -8.5751004, -8.315685, -8.0358978, -7.7424837, -7.4318134, -7.1037955,
		-6.771567, -6.4441654, -6.1173192, -5.8123201, -5.5349308, -5.2878689, -5.0710144, -4.871958,
		-4.6692465, -4.4175355, -4.0496269, -3.5226878, -2.790453, -1.802337, -0.57211313, 0.84595194,
		2.3291933, 3.7489666, 4.9926127, 5.9908607, 6.7296425, 7.1862659, 7.3647096 };

	double[][] signals = { y1, y2, y3, y4, y5, y6 };

	LinearRegression lr = new LinearRegression(x, signalToLinear(y4), true);

	/*for (int i = 0; i < signals.length; i++) {
	    signalToLinear(signals[i]);
	    LinearRegression lr = new LinearRegression(x, signals[i], true);
	    System.out.print(lr.slope() + "\t" + lr.R2() + "\t");
	}*/
    }

    private static void printSignalEstimated(LinearRegression lr, double[] x) {
	for (int i = 0; i < x.length; i++) {
	    double fit = lr.slope * x[i] + lr.intercept;
	    System.out.println(DecibelConverter.toDecibelScale(fit));
	}

    }

    private static double[] signalToLinear(double[] ds) {
	double[] ret = new double[ds.length];
	System.out.println();
	for (int i = 0; i < ds.length; i++) {
	    ret[i] = DecibelConverter.toLinearScale(ds[i]);
	    // System.out.println(ret[i]);
	}
	return ret;
    }

}